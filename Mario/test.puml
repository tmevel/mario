@startuml
class hu.bme.mario.client.GameFrame {
- GameDisplay display
- DisplayUpdateThread displayUpdateThread
+ {static} void main(String[])
}
enum hu.bme.mario.model.Direction {
+  TOP
+  BOTTOM
+  LEFT
+  RIGHT
}
abstract class hu.bme.mario.model.Enemy {
# void collideWithEntity(Direction,Entity)
}
abstract class hu.bme.mario.model.StandingEntity {
# double getMaxSpeedX()
# double getMaxSpeedY()
+ void collideWithBlock(Direction,int,int)
}
class hu.bme.mario.model.NormalPlayer {
+ void special()
# void collideWithEntity(Direction,Entity)
}
class hu.bme.mario.model.Mushroom {
# double getMaxSpeedX()
# void collideWithEntity(Direction,Entity)
}
class hu.bme.mario.model.ModelThread {
# Game game
+ Game getGame()
+ void setGame(Game)
+ void run()
}
class hu.bme.mario.network.Level1ModelThread {
- Server server
- {static} double newStarDelay
- double delay
- void newStar()
+ void run()
}
class hu.bme.mario.model.Goomba {
# double getMaxSpeedX()
}
class hu.bme.mario.model.QuestionBlock {
}
class hu.bme.mario.network.Level1Server {
# void initLevel()
+ {static} void main(String[])
}
class hu.bme.mario.client.DisplayUpdateThread {
- GameDisplay display
- ClientInterface clientInt
+ void run()
}
class hu.bme.mario.network.Session {
- ObjectInputStream ois
- ObjectOutputStream oos
- int sessionID
- Server server
- KeyControl control
+ KeyControl getControl()
+ int getSessionID()
+ void updateClient()
- ClientGame getPlayerGame()
+ void run()
}
class hu.bme.mario.model.FirePlayer {
+ void special()
# void collideWithEntity(Direction,Entity)
}
interface hu.bme.mario.client.Texture {
+ Image getTexture()
}
abstract class hu.bme.mario.network.Server {
# ModelThread model
- ServerSocket ss
- ArrayList<Session> sessions
- int PORT
# {abstract}void initLevel()
+ ModelThread getModel()
+ void notifyAllSessions()
+ void removeSession(Session)
+ void startModel()
+ void run()
}
class hu.bme.mario.model.SmallPlayer {
+ void special()
# void collideWithEntity(Direction,Entity)
}
class hu.bme.mario.model.BaseBlock {
}
class hu.bme.mario.model.VoidBlock {
}
class hu.bme.mario.model.Star {
- boolean walkRight
# double getMaxSpeedX()
# double getMaxSpeedY()
+ void update(double)
+ void collideWithBlock(Direction,int,int)
# void collideWithEntity(Direction,Entity)
}
abstract class hu.bme.mario.model.Player {
- {static} double jumpSpeed
- {static} double walkAcc
- {static} double stopAcc
- {static} double walkAccInAir
- {static} double stopAccInAir
- {static} double protectionDelay
- double protection
- boolean dead
- boolean walkRight
- boolean walkLeft
- int starCount
# Player newPlayer
+ int getStarCount()
+ void decStarCount()
+ void jump()
+ {abstract}void special()
+ boolean isDead()
+ void kill()
+ void walkRight()
+ void walkLeft()
+ void stop()
+ boolean isProtected()
+ void protect()
+ Player getNewPlayer()
+ void resetNewPlayer()
+ void update(double)
# double getMaxSpeedX()
# double getMaxSpeedY()
+ void collideWithBlock(Direction,int,int)
# void collideWithEntity(Direction,Entity)
}
class hu.bme.mario.model.BreakableBlock {
}
class hu.bme.mario.client.UnanimatedTexture {
- Image texture
- double cycleTime
+ Image getTexture()
}
class hu.bme.mario.model.FireBall {
- boolean walkRight
- Player owner
# double getMaxSpeedX()
# double getMaxSpeedY()
+ void update(double)
+ void collideWithBlock(Direction,int,int)
# void collideWithEntity(Direction,Entity)
}
class hu.bme.mario.model.Flower {
# void collideWithEntity(Direction,Entity)
}
class hu.bme.mario.client.GameDisplay {
- double marginX
- double displayHeightInBlock
- double scrollRatioBackground
- BufferedImage buf
- BlockTextureCache blockTextures
- EntityTextureCache entityTextures
- BufferedImage background
- BufferedImage dead
- BufferedImage won
- BufferedImage lost
- String os
- String path
- double cameraX
+ void forceCameraX(double)
+ void displayGame(ClientGame)
# void paintComponent(Graphics)
- void paintBackground(boolean)
- void paintBlocks(Block[][])
- void paintBlock(Block,int,int)
- void paintEntity(Entity)
- void recomputeCamera(ClientGame)
- void paintStars(ClientGame)
- void paintWon()
- void paintLost()
- void paintDead()
}
abstract class hu.bme.mario.model.Block {
}
abstract class hu.bme.mario.model.DumbEntity {
- boolean walkRight
# double getMaxSpeedY()
+ void update(double)
+ void collideWithBlock(Direction,int,int)
}
class hu.bme.mario.client.EntityTexture {
- Texture standing
- Texture moving
- double width
- double height
- int spriteOffsetX
- int spriteOffsetY
+ Image getMovingTexture()
+ Image getStandingTexture()
+ double getWidth()
+ double getHeight()
+ int getSpriteOffsetX()
+ int getSpriteOffsetY()
}
class hu.bme.mario.network.ClientInterface {
- ObjectInputStream ois
- ObjectOutputStream oos
- KeyControl control
- ModelThread model
- int PORT
- int sessionID
- String ip
- void reconnect()
+ ClientGame getLocalGame()
- void forceRetrieveGame()
+ void run()
+ void sendKeyEvent(KeyEvent)
}
class hu.bme.mario.model.Game {
- ArrayList<Entity> entities
- ArrayList<Player> players
- ArrayList<Entity> entitiesToBeAdded
- Block[][] map
- Block[][] mapInitial
- {static} double resetMapDelay
- double resetTime
- void resetMap()
+ ArrayList<Entity> getEntities()
+ ArrayList<Player> getPlayers()
+ Player getWinner()
+ Block[][] getMap()
+ void update(double)
+ void addEntity(Entity)
+ void addPlayer(Player)
}
abstract class hu.bme.mario.model.Entity {
- {static} double GRAVITY
# {static} double rebounceSpeed
# {static} double hitSpeed
# double x
# double y
# double speedX
# double speedY
# double accX
# double accY
# Hitbox hitbox
# boolean isLookingLeft
# boolean onTheGround
# Game game
# boolean hasToBeRemoved
+ boolean isLookingLeft()
+ boolean isMoving()
+ boolean isToBeRemoved()
+ double getX()
+ double getY()
+ Hitbox getHitbox()
# {abstract}double getMaxSpeedX()
# {abstract}double getMaxSpeedY()
+ {abstract}void collideWithBlock(Direction,int,int)
# {abstract}void collideWithEntity(Direction,Entity)
+ void update(double)
}
class hu.bme.mario.network.KeyControl {
- boolean right
- boolean left
- boolean up
- boolean special
+ boolean updateAndCheckChanged(KeyEvent)
+ boolean goRight()
+ boolean goLeft()
+ boolean jump()
+ boolean special()
}
class hu.bme.mario.model.EmptyBlock {
}
class hu.bme.mario.model.ClientGame {
- int playerID
+ Player getPlayer()
}
class hu.bme.mario.client.EntityTextureCache {
+ void loadTextures()
}
class hu.bme.mario.model.Hitbox {
- double width
- double height
- {static} double topBottomHitboxPercent
+ double getHeight()
+ double getWidth()
+ {static} Direction collisionEntity(Entity,Entity)
+ {static} boolean collisionMap(Block[][],Entity,Direction)
+ {static} boolean onGround(Block[][],Entity)
}
class hu.bme.mario.client.BlockTextureCache {
+ void loadTextures()
}
class hu.bme.mario.client.GameController {
~ ClientInterface networkInterface
+ void keyPressed(KeyEvent)
+ void keyReleased(KeyEvent)
+ void keyTyped(KeyEvent)
}
class hu.bme.mario.client.AnimatedTexture {
- Image[] frames
- double cycleTime
+ Image getTexture()
}


hu.bme.mario.client.JFrame <|-- hu.bme.mario.client.GameFrame
hu.bme.mario.model.DumbEntity <|-- hu.bme.mario.model.Enemy
hu.bme.mario.model.Entity <|-- hu.bme.mario.model.StandingEntity
hu.bme.mario.model.Player <|-- hu.bme.mario.model.NormalPlayer
hu.bme.mario.model.DumbEntity <|-- hu.bme.mario.model.Mushroom
hu.bme.mario.model.Thread <|-- hu.bme.mario.model.ModelThread
hu.bme.mario.network.ModelThread <|-- hu.bme.mario.network.Level1ModelThread
hu.bme.mario.model.Enemy <|-- hu.bme.mario.model.Goomba
hu.bme.mario.model.Block <|-- hu.bme.mario.model.QuestionBlock
hu.bme.mario.network.Server <|-- hu.bme.mario.network.Level1Server
hu.bme.mario.client.Thread <|-- hu.bme.mario.client.DisplayUpdateThread
hu.bme.mario.network.Thread <|-- hu.bme.mario.network.Session
hu.bme.mario.model.Player <|-- hu.bme.mario.model.FirePlayer
hu.bme.mario.network.Thread <|-- hu.bme.mario.network.Server
hu.bme.mario.model.Player <|-- hu.bme.mario.model.SmallPlayer
hu.bme.mario.model.Block <|-- hu.bme.mario.model.BaseBlock
hu.bme.mario.model.Block <|-- hu.bme.mario.model.VoidBlock
hu.bme.mario.model.Entity <|-- hu.bme.mario.model.Star
hu.bme.mario.model.Entity <|-- hu.bme.mario.model.Player
hu.bme.mario.model.Block <|-- hu.bme.mario.model.BreakableBlock
hu.bme.mario.client.Texture <|.. hu.bme.mario.client.UnanimatedTexture
hu.bme.mario.model.Entity <|-- hu.bme.mario.model.FireBall
hu.bme.mario.model.StandingEntity <|-- hu.bme.mario.model.Flower
hu.bme.mario.client.JPanel <|-- hu.bme.mario.client.GameDisplay
java.io.Serializable <|.. hu.bme.mario.model.Block
hu.bme.mario.model.Entity <|-- hu.bme.mario.model.DumbEntity
hu.bme.mario.network.Thread <|-- hu.bme.mario.network.ClientInterface
java.io.Serializable <|.. hu.bme.mario.model.Game
java.io.Serializable <|.. hu.bme.mario.model.Entity
java.io.Serializable <|.. hu.bme.mario.network.KeyControl
hu.bme.mario.model.Block <|-- hu.bme.mario.model.EmptyBlock
hu.bme.mario.model.Game <|-- hu.bme.mario.model.ClientGame
java.util.HashMap <|-- hu.bme.mario.client.EntityTextureCache
java.io.Serializable <|.. hu.bme.mario.model.Hitbox
java.util.HashMap <|-- hu.bme.mario.client.BlockTextureCache
java.awt.event.KeyListener <|.. hu.bme.mario.client.GameController
hu.bme.mario.client.Texture <|.. hu.bme.mario.client.AnimatedTexture
@enduml